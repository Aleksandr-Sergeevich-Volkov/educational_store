name: Main education_store Workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
    - name: Test with flake8
      run: python -m flake8 traning_store/

  test_django_tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10        
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip  
        pip install -r ./traning_store/requirements.txt 
    - name: Test django tests
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
        HEADERS: ${{ secrets.HEADERS }}  
      run: |
        cd traning_store/
        python manage.py migrate
        python manage.py test -v 2

  test_django_pytests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10        
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip  
        pip install -r ./traning_store/requirements.txt 
    - name: Test django pytests
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
        HEADERS: ${{ secrets.HEADERS }}
        TESTING: 'true'  
      run: |
        cd traning_store/
        python manage.py migrate
        cd ..
        pytest -vv --create-db

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    # needs: [tests, test_django_tests, test_django_pytests]  # ← Ждем все тесты
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./traning_store/
          push: true
          tags: volkovaleksandrsergeevich/traning_store:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    # needs: [tests, test_django_tests, test_django_pytests]  # ← Ждем все тесты
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          tags: volkovaleksandrsergeevich/traning_store_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push_to_docker_hub, build_gateway_and_push_to_docker_hub]
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.yml"
        target: "educational_store"
    
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd educational_store
          
          # 1. Останавливаем старые контейнеры
          sudo docker compose down
          
          # 2. Pull новых образов
          sudo docker compose pull
          
          # 3. Запускаем контейнеры в фоне (без -d сначала)
          sudo docker compose up -d traning_store
          
          # 4. Ждем пока БД и приложение запустятся
          sleep 30
          
          # 5. Выполняем миграции
          sudo docker compose exec traning_store python manage.py migrate --noinput
          
          # 6. Собираем статику
          sudo docker compose exec traning_store python manage.py collectstatic --noinput --clear
          
          # 7. Копируем статику
          sudo docker compose exec traning_store cp -r /app/collected_static/. /backend_static/static/
          
          # 8. Перезапускаем все сервисы
          sudo docker compose up -d

          # 9. Ждем полного запуска всех сервисов
          sleep 10
      
          # 10. Генерируем XML файл в контейнере
          sudo docker compose exec -T traning_store python manage.py generate_yml_feed
      
          # 11. Копируем ИЗ контейнера НА хост
          sudo docker cp educational_store-traning_store-1:/var/www/html/goods_chulki.xml /var/www/html/goods_chulki.xml
      
          # 12. Проверяем что файл создался
          ls -la /var/www/html/goods_chulki.xml

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой успешно выполнен! 